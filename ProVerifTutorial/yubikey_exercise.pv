(* Yubikey protocol.

  Symmetric encryption

  The Server shares a secret key k with B as well as a secret id, s_ID.
  It has one memory cell c_{S,B} per "Button" B that stores the k, s_ID and two
  natural numbers.

  Each B maintain a counter c_B

  B -> S : { (s_ID, r, n) }_k   where r is fresh and n is the current value c_B.
  B increment c_B

  If current value of c_{S,B} is (k,s_ID,i,n'),
  S check that n > n'
  "Accept" the login n' as the i+1 th login.
  Update its cell to (k,s_ID,i+1,n)
*)

(* Need (at least) two events
  1. Event 'Login(sID,i,n) indicates that the i-th login for sID was accepted with value n
  2. Event 'Press(sID,n)' indicates that the button with sID as identity was press for the n-th time.
*)

(* We want a server talking to an unbounded number of buttons, an unbounded number of times. *)

(* 2 Security properties
  1. If a login was accepted for a certain value then the correct button must have created it
  2. Two different successful authentications are necessarily with different value.
*)

(* TO DO :
  1. Write the model
  2. Sanity check it
  3. Write the queries
  4. Normally ProVerif will not be able to directly prove all your query.
    Use some axioms to make it work (hint: notice some value are strictly increasing)
*)
